-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Object.RoleExt exposing (..)

import Fractal.Enum.RoleType
import Fractal.InputObject
import Fractal.Interface
import Fractal.Object
import Fractal.Scalar
import Fractal.ScalarCodecs
import Fractal.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


id : SelectionSet Fractal.ScalarCodecs.Id Fractal.Object.RoleExt
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Fractal.ScalarCodecs.codecs |> Fractal.Scalar.unwrapCodecs |> .codecId |> .decoder)


rootnameid : SelectionSet String Fractal.Object.RoleExt
rootnameid =
    Object.selectionForField "String" "rootnameid" [] Decode.string


name : SelectionSet String Fractal.Object.RoleExt
name =
    Object.selectionForField "String" "name" [] Decode.string


about : SelectionSet (Maybe String) Fractal.Object.RoleExt
about =
    Object.selectionForField "(Maybe String)" "about" [] (Decode.string |> Decode.nullable)


role_type : SelectionSet Fractal.Enum.RoleType.RoleType Fractal.Object.RoleExt
role_type =
    Object.selectionForField "Enum.RoleType.RoleType" "role_type" [] Fractal.Enum.RoleType.decoder


color : SelectionSet (Maybe String) Fractal.Object.RoleExt
color =
    Object.selectionForField "(Maybe String)" "color" [] (Decode.string |> Decode.nullable)


type alias MandateOptionalArguments =
    { filter : OptionalArgument Fractal.InputObject.MandateFilter }


mandate :
    (MandateOptionalArguments -> MandateOptionalArguments)
    -> SelectionSet decodesTo Fractal.Object.Mandate
    -> SelectionSet (Maybe decodesTo) Fractal.Object.RoleExt
mandate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Fractal.InputObject.encodeMandateFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "mandate" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias NodesOptionalArguments =
    { filter : OptionalArgument Fractal.InputObject.NodeFilter
    , order : OptionalArgument Fractal.InputObject.NodeOrder
    , first : OptionalArgument Int
    , offset : OptionalArgument Int
    }


nodes :
    (NodesOptionalArguments -> NodesOptionalArguments)
    -> SelectionSet decodesTo Fractal.Object.Node
    -> SelectionSet (Maybe (List decodesTo)) Fractal.Object.RoleExt
nodes fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent, order = Absent, first = Absent, offset = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Fractal.InputObject.encodeNodeFilter, Argument.optional "order" filledInOptionals____.order Fractal.InputObject.encodeNodeOrder, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "nodes" optionalArgs____ object____ (Basics.identity >> Decode.list >> Decode.nullable)


n_nodes : SelectionSet (Maybe Int) Fractal.Object.RoleExt
n_nodes =
    Object.selectionForField "(Maybe Int)" "n_nodes" [] (Decode.int |> Decode.nullable)


type alias NodesAggregateOptionalArguments =
    { filter : OptionalArgument Fractal.InputObject.NodeFilter }


nodesAggregate :
    (NodesAggregateOptionalArguments -> NodesAggregateOptionalArguments)
    -> SelectionSet decodesTo Fractal.Object.NodeAggregateResult
    -> SelectionSet (Maybe decodesTo) Fractal.Object.RoleExt
nodesAggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Fractal.InputObject.encodeNodeFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "nodesAggregate" optionalArgs____ object____ (Basics.identity >> Decode.nullable)
