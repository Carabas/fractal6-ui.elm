-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Object.NodeFragment exposing (..)

import Fractal.Enum.NodeType
import Fractal.Enum.RoleType
import Fractal.InputObject
import Fractal.Interface
import Fractal.Object
import Fractal.Scalar
import Fractal.ScalarCodecs
import Fractal.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


name : SelectionSet (Maybe String) Fractal.Object.NodeFragment
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


nameid : SelectionSet (Maybe String) Fractal.Object.NodeFragment
nameid =
    Object.selectionForField "(Maybe String)" "nameid" [] (Decode.string |> Decode.nullable)


type alias ChildrenOptionalArguments =
    { order : OptionalArgument Fractal.InputObject.NodeFragmentOrder
    , first : OptionalArgument Int
    , offset : OptionalArgument Int
    }


children : (ChildrenOptionalArguments -> ChildrenOptionalArguments) -> SelectionSet decodesTo Fractal.Object.NodeFragment -> SelectionSet (Maybe (List (Maybe decodesTo))) Fractal.Object.NodeFragment
children fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { order = Absent, first = Absent, offset = Absent }

        optionalArgs =
            [ Argument.optional "order" filledInOptionals.order Fractal.InputObject.encodeNodeFragmentOrder, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "children" optionalArgs object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type_ : SelectionSet (Maybe Fractal.Enum.NodeType.NodeType) Fractal.Object.NodeFragment
type_ =
    Object.selectionForField "(Maybe Enum.NodeType.NodeType)" "type_" [] (Fractal.Enum.NodeType.decoder |> Decode.nullable)


about : SelectionSet (Maybe String) Fractal.Object.NodeFragment
about =
    Object.selectionForField "(Maybe String)" "about" [] (Decode.string |> Decode.nullable)


type alias MandateOptionalArguments =
    { filter : OptionalArgument Fractal.InputObject.MandateFilter }


mandate : (MandateOptionalArguments -> MandateOptionalArguments) -> SelectionSet decodesTo Fractal.Object.Mandate -> SelectionSet (Maybe decodesTo) Fractal.Object.NodeFragment
mandate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Fractal.InputObject.encodeMandateFilter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "mandate" optionalArgs object_ (identity >> Decode.nullable)


isPrivate : SelectionSet (Maybe Bool) Fractal.Object.NodeFragment
isPrivate =
    Object.selectionForField "(Maybe Bool)" "isPrivate" [] (Decode.bool |> Decode.nullable)


type alias CharacOptionalArguments =
    { filter : OptionalArgument Fractal.InputObject.NodeCharacFilter }


charac : (CharacOptionalArguments -> CharacOptionalArguments) -> SelectionSet decodesTo Fractal.Object.NodeCharac -> SelectionSet (Maybe decodesTo) Fractal.Object.NodeFragment
charac fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Fractal.InputObject.encodeNodeCharacFilter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "charac" optionalArgs object_ (identity >> Decode.nullable)


first_link : SelectionSet (Maybe String) Fractal.Object.NodeFragment
first_link =
    Object.selectionForField "(Maybe String)" "first_link" [] (Decode.string |> Decode.nullable)


second_link : SelectionSet (Maybe String) Fractal.Object.NodeFragment
second_link =
    Object.selectionForField "(Maybe String)" "second_link" [] (Decode.string |> Decode.nullable)


skills : SelectionSet (Maybe (List String)) Fractal.Object.NodeFragment
skills =
    Object.selectionForField "(Maybe (List String))" "skills" [] (Decode.string |> Decode.list |> Decode.nullable)


role_type : SelectionSet (Maybe Fractal.Enum.RoleType.RoleType) Fractal.Object.NodeFragment
role_type =
    Object.selectionForField "(Maybe Enum.RoleType.RoleType)" "role_type" [] (Fractal.Enum.RoleType.decoder |> Decode.nullable)
