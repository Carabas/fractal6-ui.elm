-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Object.User exposing (..)

import Fractal.InputObject
import Fractal.Interface
import Fractal.Object
import Fractal.Scalar
import Fractal.ScalarCodecs
import Fractal.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| -}
id : SelectionSet Fractal.ScalarCodecs.Id Fractal.Object.User
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Fractal.ScalarCodecs.codecs |> Fractal.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| -}
createdAt : SelectionSet Fractal.ScalarCodecs.DateTime Fractal.Object.User
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Fractal.ScalarCodecs.codecs |> Fractal.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| -}
username : SelectionSet String Fractal.Object.User
username =
    Object.selectionForField "String" "username" [] Decode.string


{-| -}
fullname : SelectionSet (Maybe String) Fractal.Object.User
fullname =
    Object.selectionForField "(Maybe String)" "fullname" [] (Decode.string |> Decode.nullable)


{-| -}
password : SelectionSet String Fractal.Object.User
password =
    Object.selectionForField "String" "password" [] Decode.string


type alias RolesOptionalArguments =
    { filter : OptionalArgument Fractal.InputObject.RoleFilter
    , order : OptionalArgument Fractal.InputObject.RoleOrder
    , first : OptionalArgument Int
    , offset : OptionalArgument Int
    }


{-|

  - filter -
  - order -
  - first -
  - offset -

-}
roles : (RolesOptionalArguments -> RolesOptionalArguments) -> SelectionSet decodesTo Fractal.Object.Role -> SelectionSet (Maybe (List decodesTo)) Fractal.Object.User
roles fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, order = Absent, first = Absent, offset = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Fractal.InputObject.encodeRoleFilter, Argument.optional "order" filledInOptionals.order Fractal.InputObject.encodeRoleOrder, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "roles" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias BackedRolesOptionalArguments =
    { filter : OptionalArgument Fractal.InputObject.RoleFilter
    , order : OptionalArgument Fractal.InputObject.RoleOrder
    , first : OptionalArgument Int
    , offset : OptionalArgument Int
    }


{-|

  - filter -
  - order -
  - first -
  - offset -

-}
backed_roles : (BackedRolesOptionalArguments -> BackedRolesOptionalArguments) -> SelectionSet decodesTo Fractal.Object.Role -> SelectionSet (Maybe (List decodesTo)) Fractal.Object.User
backed_roles fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, order = Absent, first = Absent, offset = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Fractal.InputObject.encodeRoleFilter, Argument.optional "order" filledInOptionals.order Fractal.InputObject.encodeRoleOrder, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "backed_roles" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


{-| -}
bio : SelectionSet (Maybe String) Fractal.Object.User
bio =
    Object.selectionForField "(Maybe String)" "bio" [] (Decode.string |> Decode.nullable)
