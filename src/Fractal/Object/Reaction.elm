-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Object.Reaction exposing (..)

import Fractal.InputObject
import Fractal.Interface
import Fractal.Object
import Fractal.Scalar
import Fractal.ScalarCodecs
import Fractal.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


id : SelectionSet Fractal.ScalarCodecs.Id Fractal.Object.Reaction
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Fractal.ScalarCodecs.codecs |> Fractal.Scalar.unwrapCodecs |> .codecId |> .decoder)


reactionid : SelectionSet String Fractal.Object.Reaction
reactionid =
    Object.selectionForField "String" "reactionid" [] Decode.string


type alias UserOptionalArguments =
    { filter : OptionalArgument Fractal.InputObject.UserFilter }


user :
    (UserOptionalArguments -> UserOptionalArguments)
    -> SelectionSet decodesTo Fractal.Object.User
    -> SelectionSet decodesTo Fractal.Object.Reaction
user fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Fractal.InputObject.encodeUserFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "user" optionalArgs____ object____ Basics.identity


type alias CommentOptionalArguments =
    { filter : OptionalArgument Fractal.InputObject.CommentFilter }


comment :
    (CommentOptionalArguments -> CommentOptionalArguments)
    -> SelectionSet decodesTo Fractal.Object.Comment
    -> SelectionSet decodesTo Fractal.Object.Reaction
comment fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Fractal.InputObject.encodeCommentFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "comment" optionalArgs____ object____ Basics.identity


type_ : SelectionSet Int Fractal.Object.Reaction
type_ =
    Object.selectionForField "Int" "type_" [] Decode.int
