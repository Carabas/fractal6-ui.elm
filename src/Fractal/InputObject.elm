-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.InputObject exposing (..)

import Fractal.Enum.TensionType
import Fractal.Interface
import Fractal.Object
import Fractal.Scalar
import Fractal.ScalarCodecs
import Fractal.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildAddTensionInput : AddTensionInputRequiredFields -> (AddTensionInputOptionalFields -> AddTensionInputOptionalFields) -> AddTensionInput
buildAddTensionInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { message = Absent, createdAt = Absent, nth = Absent, emitter = Absent, receivers = Absent, severity = Absent, isAnonymous = Absent }
    in
    { title = required.title, message = optionals.message, createdAt = optionals.createdAt, nth = optionals.nth, type_ = required.type_, emitter = optionals.emitter, receivers = optionals.receivers, severity = optionals.severity, isAnonymous = optionals.isAnonymous }


type alias AddTensionInputRequiredFields =
    { title : String
    , type_ : Fractal.Enum.TensionType.TensionType
    }


type alias AddTensionInputOptionalFields =
    { message : OptionalArgument String
    , createdAt : OptionalArgument Fractal.ScalarCodecs.DateTime
    , nth : OptionalArgument Int
    , emitter : OptionalArgument NodeRef
    , receivers : OptionalArgument (List NodeRef)
    , severity : OptionalArgument Int
    , isAnonymous : OptionalArgument Bool
    }


{-| Type for the AddTensionInput input object.
-}
type alias AddTensionInput =
    { title : String
    , message : OptionalArgument String
    , createdAt : OptionalArgument Fractal.ScalarCodecs.DateTime
    , nth : OptionalArgument Int
    , type_ : Fractal.Enum.TensionType.TensionType
    , emitter : OptionalArgument NodeRef
    , receivers : OptionalArgument (List NodeRef)
    , severity : OptionalArgument Int
    , isAnonymous : OptionalArgument Bool
    }


{-| Encode a AddTensionInput into a value that can be used as an argument.
-}
encodeAddTensionInput : AddTensionInput -> Value
encodeAddTensionInput input =
    Encode.maybeObject
        [ ( "title", Encode.string input.title |> Just ), ( "message", Encode.string |> Encode.optional input.message ), ( "createdAt", (Fractal.ScalarCodecs.codecs |> Fractal.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt ), ( "nth", Encode.int |> Encode.optional input.nth ), ( "type_", Encode.enum Fractal.Enum.TensionType.toString input.type_ |> Just ), ( "emitter", encodeNodeRef |> Encode.optional input.emitter ), ( "receivers", (encodeNodeRef |> Encode.list) |> Encode.optional input.receivers ), ( "severity", Encode.int |> Encode.optional input.severity ), ( "isAnonymous", Encode.bool |> Encode.optional input.isAnonymous ) ]


buildAddUserInput : AddUserInputRequiredFields -> (AddUserInputOptionalFields -> AddUserInputOptionalFields) -> AddUserInput
buildAddUserInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { roles = Absent }
    in
    AddUserInput { username = required.username, password = required.password, roles = optionals.roles }


type alias AddUserInputRequiredFields =
    { username : String
    , password : String
    }


type alias AddUserInputOptionalFields =
    { roles : OptionalArgument (List RoleRef) }


{-| Type alias for the `AddUserInput` attributes. Note that this type
needs to use the `AddUserInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AddUserInputRaw =
    { username : String
    , password : String
    , roles : OptionalArgument (List RoleRef)
    }


{-| Type for the AddUserInput input object.
-}
type AddUserInput
    = AddUserInput AddUserInputRaw


{-| Encode a AddUserInput into a value that can be used as an argument.
-}
encodeAddUserInput : AddUserInput -> Value
encodeAddUserInput (AddUserInput input) =
    Encode.maybeObject
        [ ( "username", Encode.string input.username |> Just ), ( "password", Encode.string input.password |> Just ), ( "roles", (encodeRoleRef |> Encode.list) |> Encode.optional input.roles ) ]


buildNodeRef : NodeRefRequiredFields -> NodeRef
buildNodeRef required =
    { id = required.id }


type alias NodeRefRequiredFields =
    { id : Fractal.ScalarCodecs.Id }


{-| Type for the NodeRef input object.
-}
type alias NodeRef =
    { id : Fractal.ScalarCodecs.Id }


{-| Encode a NodeRef into a value that can be used as an argument.
-}
encodeNodeRef : NodeRef -> Value
encodeNodeRef input =
    Encode.maybeObject
        [ ( "id", (Fractal.ScalarCodecs.codecs |> Fractal.Scalar.unwrapEncoder .codecId) input.id |> Just ) ]


buildRoleRef : (RoleRefOptionalFields -> RoleRefOptionalFields) -> RoleRef
buildRoleRef fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, title = Absent, mandate = Absent, createdAt = Absent, createdBy = Absent, parent = Absent, children = Absent, tensions_out = Absent, tensions_in = Absent, skills = Absent, user = Absent, second = Absent }
    in
    RoleRef { id = optionals.id, title = optionals.title, mandate = optionals.mandate, createdAt = optionals.createdAt, createdBy = optionals.createdBy, parent = optionals.parent, children = optionals.children, tensions_out = optionals.tensions_out, tensions_in = optionals.tensions_in, skills = optionals.skills, user = optionals.user, second = optionals.second }


type alias RoleRefOptionalFields =
    { id : OptionalArgument Fractal.ScalarCodecs.Id
    , title : OptionalArgument String
    , mandate : OptionalArgument String
    , createdAt : OptionalArgument Fractal.ScalarCodecs.DateTime
    , createdBy : OptionalArgument UserRef
    , parent : OptionalArgument NodeRef
    , children : OptionalArgument (List NodeRef)
    , tensions_out : OptionalArgument (List TensionRef)
    , tensions_in : OptionalArgument (List TensionRef)
    , skills : OptionalArgument (List String)
    , user : OptionalArgument UserRef
    , second : OptionalArgument UserRef
    }


{-| Type alias for the `RoleRef` attributes. Note that this type
needs to use the `RoleRef` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias RoleRefRaw =
    { id : OptionalArgument Fractal.ScalarCodecs.Id
    , title : OptionalArgument String
    , mandate : OptionalArgument String
    , createdAt : OptionalArgument Fractal.ScalarCodecs.DateTime
    , createdBy : OptionalArgument UserRef
    , parent : OptionalArgument NodeRef
    , children : OptionalArgument (List NodeRef)
    , tensions_out : OptionalArgument (List TensionRef)
    , tensions_in : OptionalArgument (List TensionRef)
    , skills : OptionalArgument (List String)
    , user : OptionalArgument UserRef
    , second : OptionalArgument UserRef
    }


{-| Type for the RoleRef input object.
-}
type RoleRef
    = RoleRef RoleRefRaw


{-| Encode a RoleRef into a value that can be used as an argument.
-}
encodeRoleRef : RoleRef -> Value
encodeRoleRef (RoleRef input) =
    Encode.maybeObject
        [ ( "id", (Fractal.ScalarCodecs.codecs |> Fractal.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "title", Encode.string |> Encode.optional input.title ), ( "mandate", Encode.string |> Encode.optional input.mandate ), ( "createdAt", (Fractal.ScalarCodecs.codecs |> Fractal.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt ), ( "createdBy", encodeUserRef |> Encode.optional input.createdBy ), ( "parent", encodeNodeRef |> Encode.optional input.parent ), ( "children", (encodeNodeRef |> Encode.list) |> Encode.optional input.children ), ( "tensions_out", (encodeTensionRef |> Encode.list) |> Encode.optional input.tensions_out ), ( "tensions_in", (encodeTensionRef |> Encode.list) |> Encode.optional input.tensions_in ), ( "skills", (Encode.string |> Encode.list) |> Encode.optional input.skills ), ( "user", encodeUserRef |> Encode.optional input.user ), ( "second", encodeUserRef |> Encode.optional input.second ) ]


buildTensionRef : (TensionRefOptionalFields -> TensionRefOptionalFields) -> TensionRef
buildTensionRef fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, title = Absent, message = Absent, createdAt = Absent, nth = Absent, type_ = Absent, emitter = Absent, receivers = Absent, severity = Absent, isAnonymous = Absent }
    in
    { id = optionals.id, title = optionals.title, message = optionals.message, createdAt = optionals.createdAt, nth = optionals.nth, type_ = optionals.type_, emitter = optionals.emitter, receivers = optionals.receivers, severity = optionals.severity, isAnonymous = optionals.isAnonymous }


type alias TensionRefOptionalFields =
    { id : OptionalArgument Fractal.ScalarCodecs.Id
    , title : OptionalArgument String
    , message : OptionalArgument String
    , createdAt : OptionalArgument Fractal.ScalarCodecs.DateTime
    , nth : OptionalArgument Int
    , type_ : OptionalArgument Fractal.Enum.TensionType.TensionType
    , emitter : OptionalArgument NodeRef
    , receivers : OptionalArgument (List NodeRef)
    , severity : OptionalArgument Int
    , isAnonymous : OptionalArgument Bool
    }


{-| Type for the TensionRef input object.
-}
type alias TensionRef =
    { id : OptionalArgument Fractal.ScalarCodecs.Id
    , title : OptionalArgument String
    , message : OptionalArgument String
    , createdAt : OptionalArgument Fractal.ScalarCodecs.DateTime
    , nth : OptionalArgument Int
    , type_ : OptionalArgument Fractal.Enum.TensionType.TensionType
    , emitter : OptionalArgument NodeRef
    , receivers : OptionalArgument (List NodeRef)
    , severity : OptionalArgument Int
    , isAnonymous : OptionalArgument Bool
    }


{-| Encode a TensionRef into a value that can be used as an argument.
-}
encodeTensionRef : TensionRef -> Value
encodeTensionRef input =
    Encode.maybeObject
        [ ( "id", (Fractal.ScalarCodecs.codecs |> Fractal.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "title", Encode.string |> Encode.optional input.title ), ( "message", Encode.string |> Encode.optional input.message ), ( "createdAt", (Fractal.ScalarCodecs.codecs |> Fractal.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.createdAt ), ( "nth", Encode.int |> Encode.optional input.nth ), ( "type_", Encode.enum Fractal.Enum.TensionType.toString |> Encode.optional input.type_ ), ( "emitter", encodeNodeRef |> Encode.optional input.emitter ), ( "receivers", (encodeNodeRef |> Encode.list) |> Encode.optional input.receivers ), ( "severity", Encode.int |> Encode.optional input.severity ), ( "isAnonymous", Encode.bool |> Encode.optional input.isAnonymous ) ]


buildUserRef : (UserRefOptionalFields -> UserRefOptionalFields) -> UserRef
buildUserRef fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, username = Absent, password = Absent, roles = Absent }
    in
    UserRef { id = optionals.id, username = optionals.username, password = optionals.password, roles = optionals.roles }


type alias UserRefOptionalFields =
    { id : OptionalArgument Fractal.ScalarCodecs.Id
    , username : OptionalArgument String
    , password : OptionalArgument String
    , roles : OptionalArgument (List RoleRef)
    }


{-| Type alias for the `UserRef` attributes. Note that this type
needs to use the `UserRef` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias UserRefRaw =
    { id : OptionalArgument Fractal.ScalarCodecs.Id
    , username : OptionalArgument String
    , password : OptionalArgument String
    , roles : OptionalArgument (List RoleRef)
    }


{-| Type for the UserRef input object.
-}
type UserRef
    = UserRef UserRefRaw


{-| Encode a UserRef into a value that can be used as an argument.
-}
encodeUserRef : UserRef -> Value
encodeUserRef (UserRef input) =
    Encode.maybeObject
        [ ( "id", (Fractal.ScalarCodecs.codecs |> Fractal.Scalar.unwrapEncoder .codecId) |> Encode.optional input.id ), ( "username", Encode.string |> Encode.optional input.username ), ( "password", Encode.string |> Encode.optional input.password ), ( "roles", (encodeRoleRef |> Encode.list) |> Encode.optional input.roles ) ]
