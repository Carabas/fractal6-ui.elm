-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.SharedNodeHasFilter exposing (..)

import Json.Decode as Decode exposing (Decoder)


type SharedNodeHasFilter
    = N_labels
    | N_tensions
    | N_closed_tensions


list : List SharedNodeHasFilter
list =
    [ N_labels, N_tensions, N_closed_tensions ]


decoder : Decoder SharedNodeHasFilter
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "n_labels" ->
                        Decode.succeed N_labels

                    "n_tensions" ->
                        Decode.succeed N_tensions

                    "n_closed_tensions" ->
                        Decode.succeed N_closed_tensions

                    _ ->
                        Decode.fail ("Invalid SharedNodeHasFilter type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : SharedNodeHasFilter -> String
toString enum =
    case enum of
        N_labels ->
            "n_labels"

        N_tensions ->
            "n_tensions"

        N_closed_tensions ->
            "n_closed_tensions"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe SharedNodeHasFilter
fromString enumString =
    case enumString of
        "n_labels" ->
            Just N_labels

        "n_tensions" ->
            Just N_tensions

        "n_closed_tensions" ->
            Just N_closed_tensions

        _ ->
            Nothing
