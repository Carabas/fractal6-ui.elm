-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.BlobType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type BlobType
    = OnNode
    | OnAbout
    | OnMandate
    | OnFirstLink
    | OnDoc


list : List BlobType
list =
    [ OnNode, OnAbout, OnMandate, OnFirstLink, OnDoc ]


decoder : Decoder BlobType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "OnNode" ->
                        Decode.succeed OnNode

                    "OnAbout" ->
                        Decode.succeed OnAbout

                    "OnMandate" ->
                        Decode.succeed OnMandate

                    "OnFirstLink" ->
                        Decode.succeed OnFirstLink

                    "OnDoc" ->
                        Decode.succeed OnDoc

                    _ ->
                        Decode.fail ("Invalid BlobType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : BlobType -> String
toString enum =
    case enum of
        OnNode ->
            "OnNode"

        OnAbout ->
            "OnAbout"

        OnMandate ->
            "OnMandate"

        OnFirstLink ->
            "OnFirstLink"

        OnDoc ->
            "OnDoc"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe BlobType
fromString enumString =
    case enumString of
        "OnNode" ->
            Just OnNode

        "OnAbout" ->
            Just OnAbout

        "OnMandate" ->
            Just OnMandate

        "OnFirstLink" ->
            Just OnFirstLink

        "OnDoc" ->
            Just OnDoc

        _ ->
            Nothing
