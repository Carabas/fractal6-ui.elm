-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.TensionEvent exposing (..)

import Json.Decode as Decode exposing (Decoder)


type TensionEvent
    = Created
    | Reopened
    | Closed
    | TitleUpdated
    | CommentPushed
    | AssigneeAdded
    | AssigneeRemoved
    | LabelAdded
    | LabelRemoved
    | BlobCreated
    | BlobCommitted
    | Moved
    | BlobPushed
    | BlobArchived
    | BlobUnarchived
    | UserJoin
    | UserLeft


list : List TensionEvent
list =
    [ Created, Reopened, Closed, TitleUpdated, CommentPushed, AssigneeAdded, AssigneeRemoved, LabelAdded, LabelRemoved, BlobCreated, BlobCommitted, Moved, BlobPushed, BlobArchived, BlobUnarchived, UserJoin, UserLeft ]


decoder : Decoder TensionEvent
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "Created" ->
                        Decode.succeed Created

                    "Reopened" ->
                        Decode.succeed Reopened

                    "Closed" ->
                        Decode.succeed Closed

                    "TitleUpdated" ->
                        Decode.succeed TitleUpdated

                    "CommentPushed" ->
                        Decode.succeed CommentPushed

                    "AssigneeAdded" ->
                        Decode.succeed AssigneeAdded

                    "AssigneeRemoved" ->
                        Decode.succeed AssigneeRemoved

                    "LabelAdded" ->
                        Decode.succeed LabelAdded

                    "LabelRemoved" ->
                        Decode.succeed LabelRemoved

                    "BlobCreated" ->
                        Decode.succeed BlobCreated

                    "BlobCommitted" ->
                        Decode.succeed BlobCommitted

                    "Moved" ->
                        Decode.succeed Moved

                    "BlobPushed" ->
                        Decode.succeed BlobPushed

                    "BlobArchived" ->
                        Decode.succeed BlobArchived

                    "BlobUnarchived" ->
                        Decode.succeed BlobUnarchived

                    "UserJoin" ->
                        Decode.succeed UserJoin

                    "UserLeft" ->
                        Decode.succeed UserLeft

                    _ ->
                        Decode.fail ("Invalid TensionEvent type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : TensionEvent -> String
toString enum =
    case enum of
        Created ->
            "Created"

        Reopened ->
            "Reopened"

        Closed ->
            "Closed"

        TitleUpdated ->
            "TitleUpdated"

        CommentPushed ->
            "CommentPushed"

        AssigneeAdded ->
            "AssigneeAdded"

        AssigneeRemoved ->
            "AssigneeRemoved"

        LabelAdded ->
            "LabelAdded"

        LabelRemoved ->
            "LabelRemoved"

        BlobCreated ->
            "BlobCreated"

        BlobCommitted ->
            "BlobCommitted"

        Moved ->
            "Moved"

        BlobPushed ->
            "BlobPushed"

        BlobArchived ->
            "BlobArchived"

        BlobUnarchived ->
            "BlobUnarchived"

        UserJoin ->
            "UserJoin"

        UserLeft ->
            "UserLeft"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe TensionEvent
fromString enumString =
    case enumString of
        "Created" ->
            Just Created

        "Reopened" ->
            Just Reopened

        "Closed" ->
            Just Closed

        "TitleUpdated" ->
            Just TitleUpdated

        "CommentPushed" ->
            Just CommentPushed

        "AssigneeAdded" ->
            Just AssigneeAdded

        "AssigneeRemoved" ->
            Just AssigneeRemoved

        "LabelAdded" ->
            Just LabelAdded

        "LabelRemoved" ->
            Just LabelRemoved

        "BlobCreated" ->
            Just BlobCreated

        "BlobCommitted" ->
            Just BlobCommitted

        "Moved" ->
            Just Moved

        "BlobPushed" ->
            Just BlobPushed

        "BlobArchived" ->
            Just BlobArchived

        "BlobUnarchived" ->
            Just BlobUnarchived

        "UserJoin" ->
            Just UserJoin

        "UserLeft" ->
            Just UserLeft

        _ ->
            Nothing
