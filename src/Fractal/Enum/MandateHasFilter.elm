-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.MandateHasFilter exposing (..)

import Json.Decode as Decode exposing (Decoder)


type MandateHasFilter
    = Purpose
    | Responsabilities
    | Domains
    | Policies


list : List MandateHasFilter
list =
    [ Purpose, Responsabilities, Domains, Policies ]


decoder : Decoder MandateHasFilter
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "purpose" ->
                        Decode.succeed Purpose

                    "responsabilities" ->
                        Decode.succeed Responsabilities

                    "domains" ->
                        Decode.succeed Domains

                    "policies" ->
                        Decode.succeed Policies

                    _ ->
                        Decode.fail ("Invalid MandateHasFilter type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : MandateHasFilter -> String
toString enum =
    case enum of
        Purpose ->
            "purpose"

        Responsabilities ->
            "responsabilities"

        Domains ->
            "domains"

        Policies ->
            "policies"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe MandateHasFilter
fromString enumString =
    case enumString of
        "purpose" ->
            Just Purpose

        "responsabilities" ->
            Just Responsabilities

        "domains" ->
            Just Domains

        "policies" ->
            Just Policies

        _ ->
            Nothing
