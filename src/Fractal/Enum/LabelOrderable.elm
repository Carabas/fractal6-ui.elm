-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.LabelOrderable exposing (..)

import Json.Decode as Decode exposing (Decoder)


type LabelOrderable
    = Rootnameid
    | Name
    | Description
    | Color
    | N_nodes
    | N_tensions


list : List LabelOrderable
list =
    [ Rootnameid, Name, Description, Color, N_nodes, N_tensions ]


decoder : Decoder LabelOrderable
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "rootnameid" ->
                        Decode.succeed Rootnameid

                    "name" ->
                        Decode.succeed Name

                    "description" ->
                        Decode.succeed Description

                    "color" ->
                        Decode.succeed Color

                    "n_nodes" ->
                        Decode.succeed N_nodes

                    "n_tensions" ->
                        Decode.succeed N_tensions

                    _ ->
                        Decode.fail ("Invalid LabelOrderable type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : LabelOrderable -> String
toString enum =
    case enum of
        Rootnameid ->
            "rootnameid"

        Name ->
            "name"

        Description ->
            "description"

        Color ->
            "color"

        N_nodes ->
            "n_nodes"

        N_tensions ->
            "n_tensions"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe LabelOrderable
fromString enumString =
    case enumString of
        "rootnameid" ->
            Just Rootnameid

        "name" ->
            Just Name

        "description" ->
            Just Description

        "color" ->
            Just Color

        "n_nodes" ->
            Just N_nodes

        "n_tensions" ->
            Just N_tensions

        _ ->
            Nothing
