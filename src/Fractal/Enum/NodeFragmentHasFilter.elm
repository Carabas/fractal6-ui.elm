-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.NodeFragmentHasFilter exposing (..)

import Json.Decode as Decode exposing (Decoder)


type NodeFragmentHasFilter
    = Name
    | Nameid
    | Type_
    | About
    | Mandate
    | Visibility
    | Mode
    | Children
    | First_link
    | Second_link
    | Skills
    | Role_type


list : List NodeFragmentHasFilter
list =
    [ Name, Nameid, Type_, About, Mandate, Visibility, Mode, Children, First_link, Second_link, Skills, Role_type ]


decoder : Decoder NodeFragmentHasFilter
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "name" ->
                        Decode.succeed Name

                    "nameid" ->
                        Decode.succeed Nameid

                    "type_" ->
                        Decode.succeed Type_

                    "about" ->
                        Decode.succeed About

                    "mandate" ->
                        Decode.succeed Mandate

                    "visibility" ->
                        Decode.succeed Visibility

                    "mode" ->
                        Decode.succeed Mode

                    "children" ->
                        Decode.succeed Children

                    "first_link" ->
                        Decode.succeed First_link

                    "second_link" ->
                        Decode.succeed Second_link

                    "skills" ->
                        Decode.succeed Skills

                    "role_type" ->
                        Decode.succeed Role_type

                    _ ->
                        Decode.fail ("Invalid NodeFragmentHasFilter type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : NodeFragmentHasFilter -> String
toString enum =
    case enum of
        Name ->
            "name"

        Nameid ->
            "nameid"

        Type_ ->
            "type_"

        About ->
            "about"

        Mandate ->
            "mandate"

        Visibility ->
            "visibility"

        Mode ->
            "mode"

        Children ->
            "children"

        First_link ->
            "first_link"

        Second_link ->
            "second_link"

        Skills ->
            "skills"

        Role_type ->
            "role_type"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe NodeFragmentHasFilter
fromString enumString =
    case enumString of
        "name" ->
            Just Name

        "nameid" ->
            Just Nameid

        "type_" ->
            Just Type_

        "about" ->
            Just About

        "mandate" ->
            Just Mandate

        "visibility" ->
            Just Visibility

        "mode" ->
            Just Mode

        "children" ->
            Just Children

        "first_link" ->
            Just First_link

        "second_link" ->
            Just Second_link

        "skills" ->
            Just Skills

        "role_type" ->
            Just Role_type

        _ ->
            Nothing
