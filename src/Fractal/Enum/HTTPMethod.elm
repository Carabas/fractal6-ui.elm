-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.HTTPMethod exposing (..)

import Json.Decode as Decode exposing (Decoder)


type HTTPMethod
    = Get
    | Post
    | Put
    | Patch
    | Delete


list : List HTTPMethod
list =
    [ Get, Post, Put, Patch, Delete ]


decoder : Decoder HTTPMethod
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "GET" ->
                        Decode.succeed Get

                    "POST" ->
                        Decode.succeed Post

                    "PUT" ->
                        Decode.succeed Put

                    "PATCH" ->
                        Decode.succeed Patch

                    "DELETE" ->
                        Decode.succeed Delete

                    _ ->
                        Decode.fail ("Invalid HTTPMethod type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : HTTPMethod -> String
toString enum =
    case enum of
        Get ->
            "GET"

        Post ->
            "POST"

        Put ->
            "PUT"

        Patch ->
            "PATCH"

        Delete ->
            "DELETE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe HTTPMethod
fromString enumString =
    case enumString of
        "GET" ->
            Just Get

        "POST" ->
            Just Post

        "PUT" ->
            Just Put

        "PATCH" ->
            Just Patch

        "DELETE" ->
            Just Delete

        _ ->
            Nothing
