-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.UserOrderable exposing (..)

import Json.Decode as Decode exposing (Decoder)


type UserOrderable
    = CreatedAt
    | LastAck
    | Username
    | Name
    | Email
    | Password
    | Bio
    | Utc
    | MarkAllAsRead


list : List UserOrderable
list =
    [ CreatedAt, LastAck, Username, Name, Email, Password, Bio, Utc, MarkAllAsRead ]


decoder : Decoder UserOrderable
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "lastAck" ->
                        Decode.succeed LastAck

                    "username" ->
                        Decode.succeed Username

                    "name" ->
                        Decode.succeed Name

                    "email" ->
                        Decode.succeed Email

                    "password" ->
                        Decode.succeed Password

                    "bio" ->
                        Decode.succeed Bio

                    "utc" ->
                        Decode.succeed Utc

                    "markAllAsRead" ->
                        Decode.succeed MarkAllAsRead

                    _ ->
                        Decode.fail ("Invalid UserOrderable type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UserOrderable -> String
toString enum____ =
    case enum____ of
        CreatedAt ->
            "createdAt"

        LastAck ->
            "lastAck"

        Username ->
            "username"

        Name ->
            "name"

        Email ->
            "email"

        Password ->
            "password"

        Bio ->
            "bio"

        Utc ->
            "utc"

        MarkAllAsRead ->
            "markAllAsRead"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UserOrderable
fromString enumString____ =
    case enumString____ of
        "createdAt" ->
            Just CreatedAt

        "lastAck" ->
            Just LastAck

        "username" ->
            Just Username

        "name" ->
            Just Name

        "email" ->
            Just Email

        "password" ->
            Just Password

        "bio" ->
            Just Bio

        "utc" ->
            Just Utc

        "markAllAsRead" ->
            Just MarkAllAsRead

        _ ->
            Nothing
