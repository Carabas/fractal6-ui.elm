-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.RoleType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type RoleType
    = Owner
    | Member
    | Guest
    | Retired
    | Coordinator
    | Peer


list : List RoleType
list =
    [ Owner, Member, Guest, Retired, Coordinator, Peer ]


decoder : Decoder RoleType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "Owner" ->
                        Decode.succeed Owner

                    "Member" ->
                        Decode.succeed Member

                    "Guest" ->
                        Decode.succeed Guest

                    "Retired" ->
                        Decode.succeed Retired

                    "Coordinator" ->
                        Decode.succeed Coordinator

                    "Peer" ->
                        Decode.succeed Peer

                    _ ->
                        Decode.fail ("Invalid RoleType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : RoleType -> String
toString enum =
    case enum of
        Owner ->
            "Owner"

        Member ->
            "Member"

        Guest ->
            "Guest"

        Retired ->
            "Retired"

        Coordinator ->
            "Coordinator"

        Peer ->
            "Peer"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe RoleType
fromString enumString =
    case enumString of
        "Owner" ->
            Just Owner

        "Member" ->
            Just Member

        "Guest" ->
            Just Guest

        "Retired" ->
            Just Retired

        "Coordinator" ->
            Just Coordinator

        "Peer" ->
            Just Peer

        _ ->
            Nothing
