-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.TensionAction exposing (..)

import Json.Decode as Decode exposing (Decoder)


type TensionAction
    = NewRole
    | NewCircle
    | UpdateRoleAbout
    | UpdateCircleAbout
    | UpdateRoleMandate
    | UpdateCircleMandate


list : List TensionAction
list =
    [ NewRole, NewCircle, UpdateRoleAbout, UpdateCircleAbout, UpdateRoleMandate, UpdateCircleMandate ]


decoder : Decoder TensionAction
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "NewRole" ->
                        Decode.succeed NewRole

                    "NewCircle" ->
                        Decode.succeed NewCircle

                    "UpdateRoleAbout" ->
                        Decode.succeed UpdateRoleAbout

                    "UpdateCircleAbout" ->
                        Decode.succeed UpdateCircleAbout

                    "UpdateRoleMandate" ->
                        Decode.succeed UpdateRoleMandate

                    "UpdateCircleMandate" ->
                        Decode.succeed UpdateCircleMandate

                    _ ->
                        Decode.fail ("Invalid TensionAction type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : TensionAction -> String
toString enum =
    case enum of
        NewRole ->
            "NewRole"

        NewCircle ->
            "NewCircle"

        UpdateRoleAbout ->
            "UpdateRoleAbout"

        UpdateCircleAbout ->
            "UpdateCircleAbout"

        UpdateRoleMandate ->
            "UpdateRoleMandate"

        UpdateCircleMandate ->
            "UpdateCircleMandate"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe TensionAction
fromString enumString =
    case enumString of
        "NewRole" ->
            Just NewRole

        "NewCircle" ->
            Just NewCircle

        "UpdateRoleAbout" ->
            Just UpdateRoleAbout

        "UpdateCircleAbout" ->
            Just UpdateCircleAbout

        "UpdateRoleMandate" ->
            Just UpdateRoleMandate

        "UpdateCircleMandate" ->
            Just UpdateCircleMandate

        _ ->
            Nothing
