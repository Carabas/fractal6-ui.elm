-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.OrgaAggOrderable exposing (..)

import Json.Decode as Decode exposing (Decoder)


type OrgaAggOrderable
    = N_members
    | N_guests


list : List OrgaAggOrderable
list =
    [ N_members, N_guests ]


decoder : Decoder OrgaAggOrderable
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "n_members" ->
                        Decode.succeed N_members

                    "n_guests" ->
                        Decode.succeed N_guests

                    _ ->
                        Decode.fail ("Invalid OrgaAggOrderable type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : OrgaAggOrderable -> String
toString enum____ =
    case enum____ of
        N_members ->
            "n_members"

        N_guests ->
            "n_guests"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe OrgaAggOrderable
fromString enumString____ =
    case enumString____ of
        "n_members" ->
            Just N_members

        "n_guests" ->
            Just N_guests

        _ ->
            Nothing
