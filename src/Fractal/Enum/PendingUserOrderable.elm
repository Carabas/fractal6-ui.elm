-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.PendingUserOrderable exposing (..)

import Json.Decode as Decode exposing (Decoder)


type PendingUserOrderable
    = UpdatedAt
    | Username
    | Password
    | Email
    | Email_token
    | Token


list : List PendingUserOrderable
list =
    [ UpdatedAt, Username, Password, Email, Email_token, Token ]


decoder : Decoder PendingUserOrderable
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "updatedAt" ->
                        Decode.succeed UpdatedAt

                    "username" ->
                        Decode.succeed Username

                    "password" ->
                        Decode.succeed Password

                    "email" ->
                        Decode.succeed Email

                    "email_token" ->
                        Decode.succeed Email_token

                    "token" ->
                        Decode.succeed Token

                    _ ->
                        Decode.fail ("Invalid PendingUserOrderable type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : PendingUserOrderable -> String
toString enum____ =
    case enum____ of
        UpdatedAt ->
            "updatedAt"

        Username ->
            "username"

        Password ->
            "password"

        Email ->
            "email"

        Email_token ->
            "email_token"

        Token ->
            "token"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PendingUserOrderable
fromString enumString____ =
    case enumString____ of
        "updatedAt" ->
            Just UpdatedAt

        "username" ->
            Just Username

        "password" ->
            Just Password

        "email" ->
            Just Email

        "email_token" ->
            Just Email_token

        "token" ->
            Just Token

        _ ->
            Nothing
