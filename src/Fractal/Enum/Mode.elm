-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.Mode exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Mode
    = Batch
    | Single


list : List Mode
list =
    [ Batch, Single ]


decoder : Decoder Mode
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "BATCH" ->
                        Decode.succeed Batch

                    "SINGLE" ->
                        Decode.succeed Single

                    _ ->
                        Decode.fail ("Invalid Mode type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Mode -> String
toString enum =
    case enum of
        Batch ->
            "BATCH"

        Single ->
            "SINGLE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Mode
fromString enumString =
    case enumString of
        "BATCH" ->
            Just Batch

        "SINGLE" ->
            Just Single

        _ ->
            Nothing
