-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.UserRightsOrderable exposing (..)

import Json.Decode as Decode exposing (Decoder)


type UserRightsOrderable
    = MaxPublicOrga
    | MaxPrivateOrga


list : List UserRightsOrderable
list =
    [ MaxPublicOrga, MaxPrivateOrga ]


decoder : Decoder UserRightsOrderable
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "maxPublicOrga" ->
                        Decode.succeed MaxPublicOrga

                    "maxPrivateOrga" ->
                        Decode.succeed MaxPrivateOrga

                    _ ->
                        Decode.fail ("Invalid UserRightsOrderable type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UserRightsOrderable -> String
toString enum____ =
    case enum____ of
        MaxPublicOrga ->
            "maxPublicOrga"

        MaxPrivateOrga ->
            "maxPrivateOrga"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UserRightsOrderable
fromString enumString____ =
    case enumString____ of
        "maxPublicOrga" ->
            Just MaxPublicOrga

        "maxPrivateOrga" ->
            Just MaxPrivateOrga

        _ ->
            Nothing
