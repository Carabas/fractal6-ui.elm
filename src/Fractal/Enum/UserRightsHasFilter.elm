-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.UserRightsHasFilter exposing (..)

import Json.Decode as Decode exposing (Decoder)


type UserRightsHasFilter
    = Type_
    | CanLogin
    | CanCreateRoot
    | MaxPublicOrga
    | HasEmailNotifications


list : List UserRightsHasFilter
list =
    [ Type_, CanLogin, CanCreateRoot, MaxPublicOrga, HasEmailNotifications ]


decoder : Decoder UserRightsHasFilter
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "type_" ->
                        Decode.succeed Type_

                    "canLogin" ->
                        Decode.succeed CanLogin

                    "canCreateRoot" ->
                        Decode.succeed CanCreateRoot

                    "maxPublicOrga" ->
                        Decode.succeed MaxPublicOrga

                    "hasEmailNotifications" ->
                        Decode.succeed HasEmailNotifications

                    _ ->
                        Decode.fail ("Invalid UserRightsHasFilter type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UserRightsHasFilter -> String
toString enum____ =
    case enum____ of
        Type_ ->
            "type_"

        CanLogin ->
            "canLogin"

        CanCreateRoot ->
            "canCreateRoot"

        MaxPublicOrga ->
            "maxPublicOrga"

        HasEmailNotifications ->
            "hasEmailNotifications"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UserRightsHasFilter
fromString enumString____ =
    case enumString____ of
        "type_" ->
            Just Type_

        "canLogin" ->
            Just CanLogin

        "canCreateRoot" ->
            Just CanCreateRoot

        "maxPublicOrga" ->
            Just MaxPublicOrga

        "hasEmailNotifications" ->
            Just HasEmailNotifications

        _ ->
            Nothing
