-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.DgraphIndex exposing (..)

import Json.Decode as Decode exposing (Decoder)


type DgraphIndex
    = Int
    | Int64
    | Float
    | Bool
    | Hash
    | Exact
    | Term
    | Fulltext
    | Trigram
    | Regexp
    | Year
    | Month
    | Day
    | Hour
    | Geo


list : List DgraphIndex
list =
    [ Int, Int64, Float, Bool, Hash, Exact, Term, Fulltext, Trigram, Regexp, Year, Month, Day, Hour, Geo ]


decoder : Decoder DgraphIndex
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "int" ->
                        Decode.succeed Int

                    "int64" ->
                        Decode.succeed Int64

                    "float" ->
                        Decode.succeed Float

                    "bool" ->
                        Decode.succeed Bool

                    "hash" ->
                        Decode.succeed Hash

                    "exact" ->
                        Decode.succeed Exact

                    "term" ->
                        Decode.succeed Term

                    "fulltext" ->
                        Decode.succeed Fulltext

                    "trigram" ->
                        Decode.succeed Trigram

                    "regexp" ->
                        Decode.succeed Regexp

                    "year" ->
                        Decode.succeed Year

                    "month" ->
                        Decode.succeed Month

                    "day" ->
                        Decode.succeed Day

                    "hour" ->
                        Decode.succeed Hour

                    "geo" ->
                        Decode.succeed Geo

                    _ ->
                        Decode.fail ("Invalid DgraphIndex type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : DgraphIndex -> String
toString enum =
    case enum of
        Int ->
            "int"

        Int64 ->
            "int64"

        Float ->
            "float"

        Bool ->
            "bool"

        Hash ->
            "hash"

        Exact ->
            "exact"

        Term ->
            "term"

        Fulltext ->
            "fulltext"

        Trigram ->
            "trigram"

        Regexp ->
            "regexp"

        Year ->
            "year"

        Month ->
            "month"

        Day ->
            "day"

        Hour ->
            "hour"

        Geo ->
            "geo"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe DgraphIndex
fromString enumString =
    case enumString of
        "int" ->
            Just Int

        "int64" ->
            Just Int64

        "float" ->
            Just Float

        "bool" ->
            Just Bool

        "hash" ->
            Just Hash

        "exact" ->
            Just Exact

        "term" ->
            Just Term

        "fulltext" ->
            Just Fulltext

        "trigram" ->
            Just Trigram

        "regexp" ->
            Just Regexp

        "year" ->
            Just Year

        "month" ->
            Just Month

        "day" ->
            Just Day

        "hour" ->
            Just Hour

        "geo" ->
            Just Geo

        _ ->
            Nothing
