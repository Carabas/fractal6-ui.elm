-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.ContractHasFilter exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ContractHasFilter
    = CreatedBy
    | CreatedAt
    | UpdatedAt
    | Message
    | Contractid
    | Tension
    | Status
    | Contract_type
    | ClosedAt
    | Event
    | Candidates
    | Participants
    | Comments
    | IsValidator


list : List ContractHasFilter
list =
    [ CreatedBy, CreatedAt, UpdatedAt, Message, Contractid, Tension, Status, Contract_type, ClosedAt, Event, Candidates, Participants, Comments, IsValidator ]


decoder : Decoder ContractHasFilter
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "createdBy" ->
                        Decode.succeed CreatedBy

                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "updatedAt" ->
                        Decode.succeed UpdatedAt

                    "message" ->
                        Decode.succeed Message

                    "contractid" ->
                        Decode.succeed Contractid

                    "tension" ->
                        Decode.succeed Tension

                    "status" ->
                        Decode.succeed Status

                    "contract_type" ->
                        Decode.succeed Contract_type

                    "closedAt" ->
                        Decode.succeed ClosedAt

                    "event" ->
                        Decode.succeed Event

                    "candidates" ->
                        Decode.succeed Candidates

                    "participants" ->
                        Decode.succeed Participants

                    "comments" ->
                        Decode.succeed Comments

                    "isValidator" ->
                        Decode.succeed IsValidator

                    _ ->
                        Decode.fail ("Invalid ContractHasFilter type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ContractHasFilter -> String
toString enum =
    case enum of
        CreatedBy ->
            "createdBy"

        CreatedAt ->
            "createdAt"

        UpdatedAt ->
            "updatedAt"

        Message ->
            "message"

        Contractid ->
            "contractid"

        Tension ->
            "tension"

        Status ->
            "status"

        Contract_type ->
            "contract_type"

        ClosedAt ->
            "closedAt"

        Event ->
            "event"

        Candidates ->
            "candidates"

        Participants ->
            "participants"

        Comments ->
            "comments"

        IsValidator ->
            "isValidator"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ContractHasFilter
fromString enumString =
    case enumString of
        "createdBy" ->
            Just CreatedBy

        "createdAt" ->
            Just CreatedAt

        "updatedAt" ->
            Just UpdatedAt

        "message" ->
            Just Message

        "contractid" ->
            Just Contractid

        "tension" ->
            Just Tension

        "status" ->
            Just Status

        "contract_type" ->
            Just Contract_type

        "closedAt" ->
            Just ClosedAt

        "event" ->
            Just Event

        "candidates" ->
            Just Candidates

        "participants" ->
            Just Participants

        "comments" ->
            Just Comments

        "isValidator" ->
            Just IsValidator

        _ ->
            Nothing
