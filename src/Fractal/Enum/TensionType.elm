-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.TensionType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type TensionType
    = Operational
    | Governance
    | Help


list : List TensionType
list =
    [ Operational, Governance, Help ]


decoder : Decoder TensionType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "Operational" ->
                        Decode.succeed Operational

                    "Governance" ->
                        Decode.succeed Governance

                    "Help" ->
                        Decode.succeed Help

                    _ ->
                        Decode.fail ("Invalid TensionType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : TensionType -> String
toString enum =
    case enum of
        Operational ->
            "Operational"

        Governance ->
            "Governance"

        Help ->
            "Help"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe TensionType
fromString enumString =
    case enumString of
        "Operational" ->
            Just Operational

        "Governance" ->
            Just Governance

        "Help" ->
            Just Help

        _ ->
            Nothing
