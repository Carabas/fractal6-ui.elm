-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.EventHasFilter exposing (..)

import Json.Decode as Decode exposing (Decoder)


type EventHasFilter
    = CreatedBy
    | CreatedAt
    | UpdatedAt
    | Message
    | Tension
    | Event_type
    | Old
    | New


list : List EventHasFilter
list =
    [ CreatedBy, CreatedAt, UpdatedAt, Message, Tension, Event_type, Old, New ]


decoder : Decoder EventHasFilter
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "createdBy" ->
                        Decode.succeed CreatedBy

                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "updatedAt" ->
                        Decode.succeed UpdatedAt

                    "message" ->
                        Decode.succeed Message

                    "tension" ->
                        Decode.succeed Tension

                    "event_type" ->
                        Decode.succeed Event_type

                    "old" ->
                        Decode.succeed Old

                    "new" ->
                        Decode.succeed New

                    _ ->
                        Decode.fail ("Invalid EventHasFilter type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : EventHasFilter -> String
toString enum =
    case enum of
        CreatedBy ->
            "createdBy"

        CreatedAt ->
            "createdAt"

        UpdatedAt ->
            "updatedAt"

        Message ->
            "message"

        Tension ->
            "tension"

        Event_type ->
            "event_type"

        Old ->
            "old"

        New ->
            "new"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe EventHasFilter
fromString enumString =
    case enumString of
        "createdBy" ->
            Just CreatedBy

        "createdAt" ->
            Just CreatedAt

        "updatedAt" ->
            Just UpdatedAt

        "message" ->
            Just Message

        "tension" ->
            Just Tension

        "event_type" ->
            Just Event_type

        "old" ->
            Just Old

        "new" ->
            Just New

        _ ->
            Nothing
