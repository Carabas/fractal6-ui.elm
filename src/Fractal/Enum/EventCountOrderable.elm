-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.EventCountOrderable exposing (..)

import Json.Decode as Decode exposing (Decoder)


type EventCountOrderable
    = Unread_events
    | Pending_contracts


list : List EventCountOrderable
list =
    [ Unread_events, Pending_contracts ]


decoder : Decoder EventCountOrderable
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "unread_events" ->
                        Decode.succeed Unread_events

                    "pending_contracts" ->
                        Decode.succeed Pending_contracts

                    _ ->
                        Decode.fail ("Invalid EventCountOrderable type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : EventCountOrderable -> String
toString enum____ =
    case enum____ of
        Unread_events ->
            "unread_events"

        Pending_contracts ->
            "pending_contracts"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe EventCountOrderable
fromString enumString____ =
    case enumString____ of
        "unread_events" ->
            Just Unread_events

        "pending_contracts" ->
            Just Pending_contracts

        _ ->
            Nothing
