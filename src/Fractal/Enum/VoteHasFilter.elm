-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.VoteHasFilter exposing (..)

import Json.Decode as Decode exposing (Decoder)


type VoteHasFilter
    = CreatedBy
    | CreatedAt
    | UpdatedAt
    | Message
    | Voteid
    | Contract
    | Node
    | Data


list : List VoteHasFilter
list =
    [ CreatedBy, CreatedAt, UpdatedAt, Message, Voteid, Contract, Node, Data ]


decoder : Decoder VoteHasFilter
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "createdBy" ->
                        Decode.succeed CreatedBy

                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "updatedAt" ->
                        Decode.succeed UpdatedAt

                    "message" ->
                        Decode.succeed Message

                    "voteid" ->
                        Decode.succeed Voteid

                    "contract" ->
                        Decode.succeed Contract

                    "node" ->
                        Decode.succeed Node

                    "data" ->
                        Decode.succeed Data

                    _ ->
                        Decode.fail ("Invalid VoteHasFilter type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : VoteHasFilter -> String
toString enum____ =
    case enum____ of
        CreatedBy ->
            "createdBy"

        CreatedAt ->
            "createdAt"

        UpdatedAt ->
            "updatedAt"

        Message ->
            "message"

        Voteid ->
            "voteid"

        Contract ->
            "contract"

        Node ->
            "node"

        Data ->
            "data"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe VoteHasFilter
fromString enumString____ =
    case enumString____ of
        "createdBy" ->
            Just CreatedBy

        "createdAt" ->
            Just CreatedAt

        "updatedAt" ->
            Just UpdatedAt

        "message" ->
            Just Message

        "voteid" ->
            Just Voteid

        "contract" ->
            Just Contract

        "node" ->
            Just Node

        "data" ->
            Just Data

        _ ->
            Nothing
