-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.CircleOrderable exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - CreatedAt -
  - Name -
  - Nameid -

-}
type CircleOrderable
    = CreatedAt
    | Name
    | Nameid


list : List CircleOrderable
list =
    [ CreatedAt, Name, Nameid ]


decoder : Decoder CircleOrderable
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "name" ->
                        Decode.succeed Name

                    "nameid" ->
                        Decode.succeed Nameid

                    _ ->
                        Decode.fail ("Invalid CircleOrderable type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : CircleOrderable -> String
toString enum =
    case enum of
        CreatedAt ->
            "createdAt"

        Name ->
            "name"

        Nameid ->
            "nameid"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe CircleOrderable
fromString enumString =
    case enumString of
        "createdAt" ->
            Just CreatedAt

        "name" ->
            Just Name

        "nameid" ->
            Just Nameid

        _ ->
            Nothing
